#!/bin/bash

# Build script for DarkSwap WebAssembly bindings

set -e

# Check if wasm-pack is installed
if ! command -v wasm-pack &> /dev/null; then
    echo "Error: wasm-pack is not installed. Please install it first:"
    echo "cargo install wasm-pack"
    exit 1
fi

# Parse command line arguments
BUILD_TYPE="debug"
TARGET_DIR="pkg"
FEATURES=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --release)
            BUILD_TYPE="release"
            shift
            ;;
        --target-dir)
            TARGET_DIR="$2"
            shift 2
            ;;
        --features)
            FEATURES="--features $2"
            shift 2
            ;;
        --help)
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --release         Build in release mode"
            echo "  --target-dir DIR  Output directory for the WebAssembly module [default: pkg]"
            echo "  --features LIST   Comma-separated list of features to enable"
            echo "  --help            Show this help message"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Create the target directory if it doesn't exist
mkdir -p "$TARGET_DIR"

# Build the WebAssembly module
echo "Building DarkSwap WebAssembly bindings in $BUILD_TYPE mode..."

# Navigate to the Rust SDK directory
cd ../darkswap-sdk

# Build the WebAssembly module
if [ "$BUILD_TYPE" = "release" ]; then
    wasm-pack build --target web --out-dir "../darkswap-web-sys/$TARGET_DIR" --release $FEATURES
else
    wasm-pack build --target web --out-dir "../darkswap-web-sys/$TARGET_DIR" --dev $FEATURES
fi

# Navigate back to the web-sys directory
cd ../darkswap-web-sys

# Copy the WebAssembly module to the src/wasm directory
mkdir -p src/wasm
cp -r "$TARGET_DIR"/* src/wasm/

# Create the TypeScript wrapper for the WebAssembly module
echo "Creating TypeScript wrapper for the WebAssembly module..."
cat > src/wasm/darkswap_sdk.ts << EOL
/**
 * DarkSwap SDK WebAssembly Module
 * 
 * This file is automatically generated by the build script.
 * Do not edit this file directly.
 */

import * as wasm from './darkswap_sdk_bg.wasm';
import { initSync } from './darkswap_sdk_bg.js';

/**
 * Initialize the WebAssembly module
 */
export default async function init(): Promise<any> {
    // Initialize the WebAssembly module
    initSync(wasm);
    
    // Import the WebAssembly module
    const module = await import('./darkswap_sdk_bg.js');
    
    return module;
}
EOL

# Build the TypeScript code
echo "Building TypeScript code..."
npm run build

echo "Build completed successfully!"
echo ""
echo "The WebAssembly module is available in $TARGET_DIR/"
echo "The TypeScript wrapper is available in src/wasm/darkswap_sdk.ts"
echo ""
echo "To use the WebAssembly module in your application, import it like this:"
echo ""
echo "import darkswap from 'darkswap-web-sys';"
echo ""
echo "await darkswap.initialize();"
echo "await darkswap.connect();"
echo ""
echo "For more information, see the documentation in docs/API.md"